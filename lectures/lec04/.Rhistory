options(java.parameters = c("-Xmx4000m"))
library(YARF)
q()
options(java.parameters = c("-Xmx4000m"))
library(YARF)
#test 1a - linear model
n = 100
X = data.frame(x1 = 0 : (n - 1))
y = 0 + 1 * X[,1] + rnorm(n, 0, 0.1)
yarf_mod = YARF(X, y, num_trees = 1)
yarf_mod
rf_mod = randomForest(X, y, num_trees = 1)
rf_mod
library(randomForest)
rf_mod = randomForest(X, y, num_trees = 1)
rf_mod
noos = 200
Xoos = data.frame(x1 = runif(noos, 0, 100))
yoos_expe = Xoos[, 1]
yoos_yarf = predict(yarf_mod, Xoos)
yoos_rf = predict(rf_mod, Xoos)
sum((yoos_yarf - yoos_expe)^2) / noos
sum((yoos_rf - yoos_expe)^2) / noos
plot(yoos_expe, yoos_yarf)
abline(a = 0, b = 1, col = "blue")
library(BlandAltmanLeh)
bland.altman.plot(yoos_yarf, yoos_rf,
main = "", xlab = "Means", ylab = "Differences (YARF - RF)")
bland.altman.stats(yoos_yarf, yoos_rf)
install.packages("BlandAltmanLeh")
library(BlandAltmanLeh)
bland.altman.plot(yoos_yarf, yoos_rf,
main = "", xlab = "Means", ylab = "Differences (YARF - RF)")
bland.altman.stats(yoos_yarf, yoos_rf)
rf_mod
YARF_update_with_oob_results(yarf_mod)
4075.0729-3595.9341
exo(479.1388)
exp(479.1388)
1-pchisq(1, .05)
pchisq(1, .05)
?pchisq
?qchisq(.05, 1)
qchisq(.05, 1)
qchisq(.95, 1)
exp(-(3595.9341))
exp(0.0273 + (-0.0288)* (30))
0.4331375/(1+0.4331375)
exp(0.0273 + (-0.0288)* (31))
0.4208/(1+0.4208)
exp(0.0273 + (-0.0288)* (1))
0.9985011/(1+0.9985011)
exp(0.0273 + (-0.0288)* (2))
0.9701544/( 0.9701544 + 1)
exp(0.0273 + (-0.0288)* (60))
0.1825557/(1+0.1825557
)
exp(0.0273 + (-0.0288)* (61))
0.17737/(1+0.17737)
0.02731271/sqrt(761)
0.02731271/sqrt(958.28)
0.0387682/sqrt(761)
0.0387682/sqrt(958.28)
1012+531
857+4632
1543+5489
1012+857
531+4632
531/1543
857/5489
(531+857)/7032
531/5163
857/1069
857/1869
97/1869
2669/5163
2669/4441
97/2591
2669+97
2766/7032
1543/7032
e^(0.0273 - .0288 * 100) / (e^(0.0273 - .0288 * 100) + 1)
exp(0.0273 - .0288 * 100) / (exp(0.0273 - .0288 * 100) + 1)
exp(0.0273 - .0288 * 101) / (exp(0.0273 - .0288 * 101) + 1)
n = 100
sigma = 2
set.seed(422.722)
x = seq(0, 10, length.out = n)
f_of_x = 3 + 1.5 * x #true... pretend it's hidden
e = rnorm(n, 0, sigma)
y = f_of_x + e
Xy = data.frame(x, y)
mod = lm(y ~ poly(x, 20), Xy)
plot(x, y)
xstars = seq(min(x), max(x), length.out = 10000)
yhats = predict(mod, data.frame(x = xstars))
points(xstars, yhats, type = "l")
exp(3.751)
exp(3.751+.306)
exp(4.922)
exp(4.922 - 0.73)
exp(4.922 - 0.53)
install.packages("survival")
library(survival)
library(survival)
install.packages("survival")
library(survival)
library(surv)
?Surv
??Surv
library("survival")
library(survival)
install.packages("survival")
library(survival)
sse = 2432705.5
sse0 = 2669570.3
(sse0-sse)/4 / (sse / 89)
setwd("C:/Users/Adam/workspace/Wharton_Stat_422_722/lectures/lec04")
library(data.table)
X = fread("medicorp.csv")
X
head(X)
mod_2 = lm(SALES ~ poly(BONUS, 2), X)
mod_6 = lm(SALES ~ poly(BONUS, 6), X)
anova(mod_2, mod_6)
mod_2 = lm(SALES ~ poly(BONUS, 2), X)
mod_10 = lm(SALES ~ poly(BONUS, 10), X)
anova(mod_2, mod_10)
mod_5 = lm(SALES ~ poly(BONUS, 5), X)
anova(mod_2, mod_5)
mod_2 = lm(SALES ~ poly(BONUS, 2), X)
mod_4 = lm(SALES ~ poly(BONUS, 4), X)
anova(mod_2, mod_4)
?anova
anova(mod_2, mod_4, test = "LRT")
set.seed(422)
n = 100
sigma = 5
x = seq(0, 10, length.out = n)
y = x + rnorm(n, 0, sigma)
plot(x, y)
mod = lm(y ~ x)
abline(mod)
summary(mod)
######## F-test provides protection, t-test still passes
set.seed(422)
n = 100
sigma = 5
x = seq(0, 10, length.out = n)
y = x + rnorm(n, 0, sigma)
plot(x, y)
mod = lm(y ~ x)
abline(mod)
summary(mod)
set.seed(422)
n = 100
sigma = 5
x = seq(0, 10, length.out = n)
y = x + rnorm(n, 0, sigma)
plot(x, y)
mod = lm(y ~ x)
abline(mod)
summary(mod)
set.seed(421)
p = 100
Xjunk = matrix(rnorm(n*p), nrow = n)
X = cbind(x1, Xjunk)
colnames(X) = c("real", rep("fake", p))
mod = lm(y ~ X[, 1:80])
abline(mod)
summary(mod)
sigma = 5
x = seq(0, 10, length.out = n)
y = x + rnorm(n, 0, sigma)
plot(x, y)
mod = lm(y ~ x)
abline(mod)
summary(mod)
set.seed(421)
p = 100
Xjunk = matrix(rnorm(n*p), nrow = n)
X = cbind(x, Xjunk)
colnames(X) = c("real", rep("fake", p))
mod = lm(y ~ X[, 1:80])
abline(mod)
summary(mod)
set.seed(422)
n = 100
sigma = 5
x = seq(0, 10, length.out = n)
y = x + rnorm(n, 0, sigma)
plot(x, y)
mod = lm(y ~ x)
abline(mod)
summary(mod)
mod = lm(y ~ X[, 1:99])
abline(mod)
summary(mod)
mod = lm(y ~ X[, 1:98])
abline(mod)
summary(mod)
mod = lm(y ~ poly(x, 2))
plot(x, y)
xstars = seq(min(x), max(x), length.out = 10000)
yhats = predict(mod, data.frame(x = xstars))
points(xstars, yhats, type = "l")
mod = lm(y ~ poly(x, 20))
plot(x, y)
xstars = seq(min(x), max(x), length.out = 1000)
yhats = predict(mod, data.frame(x = xstars))
points(xstars, yhats, type = "l")
summary(mod)
mod = lm(y ~ poly(x, 60))
plot(x, y)
xstars = seq(min(x), max(x), length.out = 1000)
yhats = predict(mod, data.frame(x = xstars))
points(xstars, yhats, type = "l")
summary(mod)
?poly
length(x)
mod = lm(y ~ poly(x, 50))
mod = lm(y ~ poly(x, 40))
mod = lm(y ~ poly(x, 30))
mod = lm(y ~ poly(x, 20))
plot(x, y)
xstars = seq(min(x), max(x), length.out = 1000)
yhats = predict(mod, data.frame(x = xstars))
points(xstars, yhats, type = "l")
summary(mod)
mod = lm(y ~ poly(x, 40))
install.packages("splines")
library(splines)
mod = lm(y ~ bs(x, df = 40))
plot(x, y)
xstars = seq(min(x), max(x), length.out = 1000)
yhats = predict(mod, data.frame(x = xstars))
points(xstars, yhats, type = "l")
summary(mod)
library(splines)
mod = lm(y ~ bs(x, df = 80))
plot(x, y)
xstars = seq(min(x), max(x), length.out = 1000)
yhats = predict(mod, data.frame(x = xstars))
points(xstars, yhats, type = "l")
summary(mod)
library(splines)
mod = lm(y ~ bs(x, df = 98))
plot(x, y)
xstars = seq(min(x), max(x), length.out = 1000)
yhats = predict(mod, data.frame(x = xstars))
points(xstars, yhats, type = "l")
summary(mod)
library(splines)
mod = lm(y ~ bs(x, df = 99))
plot(x, y)
xstars = seq(min(x), max(x), length.out = 1000)
yhats = predict(mod, data.frame(x = xstars))
points(xstars, yhats, type = "l")
summary(mod)
library(splines)
mod = lm(y ~ bs(x, df = 98))
plot(x, y)
xstars = seq(min(x), max(x), length.out = 1000)
yhats = predict(mod, data.frame(x = xstars))
points(xstars, yhats, type = "l")
summary(mod)
library(splines)
mod = lm(y ~ x + bs(x, df = 97))
plot(x, y)
xstars = seq(min(x), max(x), length.out = 1000)
yhats = predict(mod, data.frame(x = xstars))
points(xstars, yhats, type = "l")
summary(mod)
x
n = 2
set.seed(422)
sigma = 5
x = c(1, 2)
f_of_x = x
y = f_of_x + rnorm(n, 0, sigma)
plot(x, y)
mod = lm(y ~ x)
abline(mod, col = "brown")
for (i in 1 : n){
segments(x[i], y[i], x[i], f_of_x[i], col = "red")
}
points(x, f_of_x, col = "green")
n = 2
set.seed(422)
sigma = 1
x = c(1, 2)
f_of_x = x
y = f_of_x + rnorm(n, 0, sigma)
plot(x, y)
mod = lm(y ~ x)
abline(mod, col = "brown")
for (i in 1 : n){
segments(x[i], y[i], x[i], f_of_x[i], col = "red")
}
points(x, f_of_x, col = "green")
n = 2
set.seed(422)
sigma = 0.5
x = c(1, 2)
f_of_x = x
y = f_of_x + rnorm(n, 0, sigma)
plot(x, y)
mod = lm(y ~ x)
abline(mod, col = "brown")
for (i in 1 : n){
segments(x[i], y[i], x[i], f_of_x[i], col = "red")
}
points(x, f_of_x, col = "green")
points(x, f_of_x, col = "green", type = "l")
summary(mod)
###overfitting demo
n = 2
set.seed(422)
sigma = 0.5
x = c(1, 2)
f_of_x = x
y = f_of_x + rnorm(n, 0, sigma)
plot(x, y)
mod = lm(y ~ x)
abline(mod, col = "brown")
for (i in 1 : n){
segments(x[i], y[i], x[i], f_of_x[i], col = "red")
}
points(x, f_of_x, col = "green", type = "l")
summary(mod)
set.seed(422)
n = 100
sigma = 5
x = seq(0, 10, length.out = n)
f_of_x = x
y = f_of_x + rnorm(n, 0, sigma)
##ditto with just polynomials
library(splines)
mod = lm(y ~ bs(x, df = 98))
plot(x, y, type = "n")
xstars = seq(min(x), max(x), length.out = 1000)
yhats = predict(mod, data.frame(x = xstars))
points(xstars, yhats, type = "l")
summary(mod)
nstar = 20
xstar = runif(nstar, 0, 10)
ystar = xstar + rnorm(n, 0, sigma)
ystar_hat = predict(mod, data.frame(x = xstar))
for (i in 1 : nstar){
segments(xstar[i], ystar[i], xstar[i], ystar_hat[i], col = "red")
}
set.seed(422)
n = 100
sigma = 5
x = seq(0, 10, length.out = n)
f_of_x = x
y = f_of_x + rnorm(n, 0, sigma)
##ditto with just polynomials
library(splines)
mod = lm(y ~ bs(x, df = 98))
plot(x, y, type = "n")
xstars = seq(min(x), max(x), length.out = 1000)
yhats = predict(mod, data.frame(x = xstars))
points(xstars, yhats, type = "l", col = "grey")
summary(mod)
nstar = 20
xstar = runif(nstar, 0, 10)
ystar = xstar + rnorm(n, 0, sigma)
plot(xstar, ystar, lwd = 3)
ystar_hat = predict(mod, data.frame(x = xstar))
for (i in 1 : nstar){
segments(xstar[i], ystar[i], xstar[i], ystar_hat[i], col = "red")
}
plot(xstar, ystar, lwd = 3)
nstar = 20
xstar = runif(nstar, 0, 10)
ystar = xstar + rnorm(nstar, 0, sigma)
plot(xstar, ystar, lwd = 3)
ystar_hat = predict(mod, data.frame(x = xstar))
for (i in 1 : nstar){
segments(xstar[i], ystar[i], xstar[i], ystar_hat[i], col = "red")
}
##ditto with just polynomials
library(splines)
mod = lm(y ~ bs(x, df = 98))
plot(x, y, type = "n")
xstars = seq(min(x), max(x), length.out = 1000)
yhats = predict(mod, data.frame(x = xstars))
points(xstars, yhats, type = "l", col = "grey")
summary(mod)
nstar = 20
xstar = seq(0, 10, length.out = nstar)
ystar = xstar + rnorm(nstar, 0, sigma)
plot(xstar, ystar, lwd = 3)
ystar_hat = predict(mod, data.frame(x = xstar))
for (i in 1 : nstar){
segments(xstar[i], ystar[i], xstar[i], ystar_hat[i], col = "red")
}
library(splines)
mod = lm(y ~ bs(x, df = 98))
plot(x, y, type = "n")
xstars = seq(min(x), max(x), length.out = 1000)
yhats = predict(mod, data.frame(x = xstars))
points(xstars, yhats, type = "l", col = "grey")
nstar = 20
xstar = seq(0, 10, length.out = nstar)
ystar = xstar + rnorm(nstar, 0, sigma)
plot(xstar, ystar, lwd = 3)
ystar_hat = predict(mod, data.frame(x = xstar))
for (i in 1 : nstar){
segments(xstar[i], ystar[i], xstar[i], ystar_hat[i], col = "red")
}
set.seed(422)
n = 100
sigma = 5
x = seq(0, 10, length.out = n)
f_of_x = x
y = f_of_x + rnorm(n, 0, sigma)
##ditto with just polynomials
library(splines)
mod = lm(y ~ bs(x, df = 98))
plot(x, y, type = "n")
xstars = seq(min(x), max(x), length.out = 1000)
yhats = predict(mod, data.frame(x = xstars))
points(xstars, yhats, type = "l", col = "grey")
nstar = 20
xstar = seq(0, 10, length.out = nstar)
ystar = xstar + rnorm(nstar, 0, sigma)
points(xstar, ystar, lwd = 3)
ystar_hat = predict(mod, data.frame(x = xstar))
for (i in 1 : nstar){
segments(xstar[i], ystar[i], xstar[i], ystar_hat[i], col = "red")
}
sse_overfit = sum((ystar - ystar_hat)^2)
simple_mod = lm(y ~ x)
abline(simple_mod, col = "blue")
ystar_hat = predict(simple_mod, data.frame(x = xstar))
for (i in 1 : nstar){
segments(xstar[i] + 0.01, ystar[i], xstar[i] + 0.01, ystar_hat[i], col = "purple", lwd = 2)
}
sse_not_overfit = sum((ystar - ystar_hat)^2)
sse_overfit
sse_not_overfit
sse_overfit / sse_not_overfit
Rsq_overfit = corr(ystar_hat_over, ystar)^2
Rsq_overfit = cor(ystar_hat_over, ystar)^2
ystar_hat_over = predict(mod, data.frame(x = xstar))
for (i in 1 : nstar){
segments(xstar[i], ystar[i], xstar[i], ystar_hat_over[i], col = "red")
}
#plot non-overfit predictions - overfittedness is in red
simple_mod = lm(y ~ x)
abline(simple_mod, col = "blue")
ystar_hat = predict(simple_mod, data.frame(x = xstar))
for (i in 1 : nstar){
segments(xstar[i] + 0.01, ystar[i], xstar[i] + 0.01, ystar_hat[i], col = "purple", lwd = 2)
}
#calculate SSEs
sse_overfit = sum((ystar - ystar_hat_over)^2)
sse_not_overfit = sum((ystar - ystar_hat)^2)
sse_overfit
sse_not_overfit
sse_overfit / sse_not_overfit
Rsq_overfit = cor(ystar_hat_over, ystar)^2
sqrt(sse_overfit / nstar)
sqrt(sse_not_overfit / nstar)
Rsq_overfit
Rsq_overfit = cor(ystar_hat_over, ystar)^2
Rsq_not_overfit = cor(ystar_hat, ystar)^2
Rsq_overfit
Rsq_not_overfit
summary(mod)
sqrt(sse_overfit / nstar)
Rsq_overfit
